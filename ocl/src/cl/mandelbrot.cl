//
//  mandelbrot.cl
//

// image pallete
constant uint fire_pallete[256] = {
    0x0,      0x0,      0x40000,  0xc0000,  0x100000, 0x180000, 0x200000,
    0x240000, 0x2c0000, 0x300000, 0x380000, 0x400000, 0x440000, 0x4c0000,
    0x500000, 0x580000, 0x600000, 0x640000, 0x6c0000, 0x740000, 0x780000,
    0x800000, 0x840000, 0x8c0000, 0x940000, 0x980000, 0xa00000, 0xa40000,
    0xac0000, 0xb40000, 0xb80000, 0xc00000, 0xc80000, 0xc80400, 0xc80c00,
    0xcc1000, 0xcc1800, 0xd01c00, 0xd02400, 0xd02800, 0xd43000, 0xd43800,
    0xd83c00, 0xd84400, 0xd84800, 0xdc5000, 0xdc5400, 0xe05c00, 0xe06400,
    0xe06800, 0xe47000, 0xe47400, 0xe87c00, 0xe88000, 0xe88800, 0xec8c00,
    0xec9400, 0xf09c00, 0xf0a000, 0xf0a800, 0xf4ac00, 0xf4b400, 0xf8b800,
    0xf8c000, 0xfcc800, 0xfcc804, 0xfcc80c, 0xfccc14, 0xfccc1c, 0xfcd024,
    0xfcd02c, 0xfcd034, 0xfcd43c, 0xfcd444, 0xfcd84c, 0xfcd854, 0xfcd85c,
    0xfcdc64, 0xfcdc6c, 0xfce074, 0xfce07c, 0xfce084, 0xfce48c, 0xfce494,
    0xfce89c, 0xfce8a4, 0xfce8ac, 0xfcecb4, 0xfcecbc, 0xfcf0c4, 0xfcf0cc,
    0xfcf0d4, 0xfcf4dc, 0xfcf4e4, 0xfcf8ec, 0xfcf8f4, 0xfcfcfc, 0xfcfcf8,
    0xfcfcf4, 0xfcfcf0, 0xfcfce8, 0xfcfce4, 0xfcfce0, 0xfcfcd8, 0xfcfcd4,
    0xfcfcd0, 0xfcfcc8, 0xfcfcc4, 0xfcfcc0, 0xfcfcb8, 0xfcfcb4, 0xfcfcb0,
    0xfcfca8, 0xfcfca4, 0xfcfca0, 0xfcfc9c, 0xfcfc94, 0xfcfc90, 0xfcfc8c,
    0xfcfc84, 0xfcfc80, 0xfcfc7c, 0xfcfc74, 0xfcfc70, 0xfcfc6c, 0xfcfc64,
    0xfcfc60, 0xfcfc5c, 0xfcfc54, 0xfcfc50, 0xfcfc4c, 0xfcfc48, 0xfcfc40,
    0xfcfc3c, 0xfcfc38, 0xfcfc30, 0xfcfc2c, 0xfcfc28, 0xfcfc20, 0xfcfc1c,
    0xfcfc18, 0xfcfc10, 0xfcfc0c, 0xfcfc08, 0xfcfc00, 0xfcf800, 0xfcf400,
    0xfcf000, 0xfce800, 0xfce400, 0xfce000, 0xfcd800, 0xfcd400, 0xfcd000,
    0xfcc800, 0xfcc400, 0xfcc000, 0xfcb800, 0xfcb400, 0xfcb000, 0xfca800,
    0xfca400, 0xfca000, 0xfc9c00, 0xfc9400, 0xfc9000, 0xfc8c00, 0xfc8400,
    0xfc8000, 0xfc7c00, 0xfc7400, 0xfc7000, 0xfc6c00, 0xfc6400, 0xfc6000,
    0xfc5c00, 0xfc5400, 0xfc5000, 0xfc4c00, 0xfc4800, 0xfc4000, 0xfc3c00,
    0xfc3800, 0xfc3000, 0xfc2c00, 0xfc2800, 0xfc2000, 0xfc1c00, 0xfc1800,
    0xfc1000, 0xfc0c00, 0xfc0800, 0xfc0000, 0xf80000, 0xf40000, 0xf00000,
    0xec0000, 0xe80000, 0xe40000, 0xe00000, 0xdc0000, 0xd80000, 0xd40000,
    0xd00000, 0xcc0000, 0xc80000, 0xc40000, 0xc00000, 0xbc0000, 0xb80000,
    0xb40000, 0xb00000, 0xac0000, 0xa80000, 0xa40000, 0xa00000, 0x9c0000,
    0x980000, 0x940000, 0x900000, 0x8c0000, 0x880000, 0x840000, 0x800000,
    0x7c0000, 0x780000, 0x740000, 0x700000, 0x6c0000, 0x680000, 0x640000,
    0x600000, 0x5c0000, 0x580000, 0x540000, 0x500000, 0x4c0000, 0x480000,
    0x440000, 0x400000, 0x3c0000, 0x380000, 0x340000, 0x300000, 0x2c0000,
    0x280000, 0x240000, 0x200000, 0x1c0000, 0x180000, 0x140000, 0x100000,
    0xc0000,  0x80000,  0x0,      0x0};

//
// mandelbrot kernel
//
kernel void mandelbrot(global uint *image, // 0: output image

                       float2 center, // 1: center
                       float scale,   // 2: scale
                       int iter)      // 3: iterations
{
  size_t index = get_global_id(0);
  int width = (int)sqrt((float)get_global_size(0)); // w x w = n

  float2 coord = (float2)(index % width, index / width) / width;

  float2 c = (float2)(1.3333f * coord.x * scale - center.x,
                      coord.y * scale - center.y),
         z = c;

  for (int it = 0; it < iter; it++) {
    z = (float2)(z.x * z.x - z.y * z.y, z.y * z.x + z.x * z.y) + c;
    if (dot(z, z) > 4.0f) {
      image[index] =
          0xff000000u |
          fire_pallete[(size_t)(256.f * (it >= iter
                                             ? 0.f
                                             : (float)(it) / (float)(iter))) %
                       256]; // iter element of pallete
      return;
    }
  }
  image[index] = 0xff000000u; // out of iter range -> black
}